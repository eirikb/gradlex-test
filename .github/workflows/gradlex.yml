on: [ push, pull_request ]

# Plan (tiers):
# A: Prerequisites
# B: Bundle JDK and Gradle (for each target)
# C: Build stage 2 (for each target)
# D: Build gg (for each target)
# E: Build stage 1
# F: Test (for each target)

name: Gradlex!
jobs:

  A-gradle:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/cache@v2
        id: cache
        with:
          path: gradle-7.0
          key: gradlecache1

      - name: Download and unzip Gradle
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          wget https://services.gradle.org/distributions/gradle-7.0-bin.zip
          unzip gradle-7.0-bin.zip
          ls -lah
          echo "what"
          ls -lah

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: gradle
          path: gradle-7.0

  #
  #  A-makeself:
  #    runs-on: ubuntu-latest
  #    steps:
  #      - uses: actions/cache@v2
  #        id: makeself
  #        with:
  #          path: makeself
  #          key: makeself
  #
  #      - name: Install makeself
  #        if: steps.cache.outputs.cache-hit != 'true' && steps.makeselfcache.outputs.cache-hit != 'true'
  #        run: |
  #          wget https://github.com/megastep/makeself/releases/download/release-2.4.3/makeself-2.4.3.run
  #          sh makeself-2.4.3.run
  #          mv makeself-2.4.3 makeself
  #
  #
  #  A-image-alpine:
  #    runs-on: ubuntu-latest
  #    steps:
  #      - uses: actions/checkout@v2.1.0
  #        if: steps.my-alpine.outputs.cache-hit != 'true'
  #
  #      - uses: actions/cache@v2
  #        id: my-alpine
  #        with:
  #          path: my-alpine.img
  #          key: my-alpine3
  #
  #      - name: Build my-alpine
  #        if: steps.my-alpine.outputs.cache-hit != 'true'
  #        run: |
  #          docker build my-alpine -t my-alpine
  #          docker save -o my-alpine.img my-alpine
  #
  #
  #  B-gradlebundle-alpine:
  #    if: false
  #    needs: [ A-gradle, A-image-alpine, A-makeself ]
  #    runs-on: ubuntu-latest
  #    steps:
  #      - uses: actions/checkout@v2
  #        if: steps.gradle-alpine.outputs.cache-hit != 'true'
  #
  #      - uses: actions/cache@v2
  #        if: steps.gradle-alpine.outputs.cache-hit != 'true'
  #        with:
  #          path: gradle-7.0
  #          key: gradle43
  #
  #      - uses: actions/cache@v2
  #        if: steps.gradle-alpine.outputs.cache-hit != 'true'
  #        with:
  #          path: my-alpine.img
  #          key: my-alpine3
  #
  #      - uses: actions/cache@v2
  #        id: gradle-alpine
  #        with:
  #          path: gradle-alpine
  #          key: gradle2-alpine
  #
  #      - run: docker load -i my-alpine.img
  #        if: steps.gradle-alpine.outputs.cache-hit != 'true'
  #
  #      - name: Build!
  #        if: steps.gradle-alpine.outputs.cache-hit != 'true'
  #        run: |
  #          docker run --rm -v $(pwd):/b my-alpine jpackage --name gradle -i gradle-7.0/lib --type app-image --main-jar gradle-launcher-7.0.jar
  #          mv gradle gradle-alpine
  #
  #      - name: Test build
  #        if: steps.gradle-alpine.outputs.cache-hit != 'true'
  #        run: docker run --rm -v $(pwd):/b my-alpine ./gradle-alpine/bin/gradle --version
  #
  #
  B-gradlebundle-os:
    needs: A-gradle
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/cache@v2
        id: cache
        with:
          path: gradle
          key: gradlebundle77-${{ matrix.os }}

      - uses: actions/checkout@v2.1.0
        if: steps.cache.outputs.cache-hit != 'true'

      - name: Download gradle
        if: steps.cache.outputs.cache-hit != 'true'
        uses: actions/download-artifact@v2
        with:
          name: gradle
          path: gradle-7.0


          ##      - uses: actions/cache@v2
          ##        id: gradlebundle
          ##        with:
          ##          path: gradle
          ##          key: gradlebundle2-${{ matrix.os }}
          #
      - uses: actions/setup-java@v2
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          distribution: 'adopt'
          java-version: '14'

      - name: Build!
        if: |
          steps.cache.outputs.cache-hit != 'true' &&
          ( matrix.os != 'windows-latest')
        run: jpackage --name gradle -i gradle-7.0/lib --type app-image --main-jar gradle-launcher-7.0.jar

      - name: Build!
        if: |
          steps.cache.outputs.cache-hit != 'true' &&
          ( matrix.os  == 'windows-latest')
        run: jpackage --name gradle -i gradle-7.0\lib --type app-image --main-jar gradle-launcher-7.0.jar

      #      - run: mv gradle gradle
      #        if: |
      #          steps.gradlebundle.outputs.cache-hit != 'true' &&
      #          ( matrix.os != 'macos-latest' )
      #        shell: bash

      - run: mv gradle.app gradle
        if: |
          steps.cache.outputs.cache-hit != 'true' &&
          ( matrix.os == 'macos-latest' )
        shell: bash
      #      - name: Test build
      #        if: steps.gradlebundle.outputs.cache-hit != 'true'
      #        run: ./gradle-${{ matrix.os }}/bin/gradle --version

      - name: Upload gradle bundle artifact
        uses: actions/upload-artifact@v2
        with:
          name: gradlebundle
          path: gradle


  C-stage2:
    #    needs: [ B-gradlebundle-alpine, B-gradlebundle-os ]
    needs: [ B-gradlebundle-os ]
    strategy:
      matrix:
        #        target: [ alpine, ubuntu-latest, macos-latest, windows-latest ]
        target: [ ubuntu-latest, macos-latest, windows-latest ]

    runs-on: ubuntu-latest
    steps:
      - uses: actions/cache@v2
        id: cache
        with:
          path: hash_${{ matrix.target }}
          key: hash_${{ matrix.target }}

      - uses: actions/checkout@v2.1.0
        if: steps.cache.outputs.cache-hit != 'true'

      - name: Download gradlebundle
        uses: actions/download-artifact@v2
        with:
          name: gradlebundle
          path: gradle


      - uses: actions/cache@v2
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          path: makeself
          key: makeself

          #      - uses: actions/cache@v2
          #        with:
          #          path: gradle
          #          key: gradlebundle2-${{ matrix.target }}

      #      - name: Upload artifact
      #        uses: actions/upload-artifact@v2
      #        with:
      #          name: gradlebundle
      #          path: gradle

      - name: Build with makeself
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          ls -lah
          mkdir yes
          cp stage2.sh yes
          mv gradle* yes/gradle
          ./makeself/makeself.sh yes gradlex2 gradlex2 sh stage2.sh

      - name: Hash!
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          gcc -o print_hash print_hash.c
          ./print_hash gradlex2 > hash_${{ matrix.target }}

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: hash_${{ matrix.target }}
          path: hash_${{ matrix.target }}

      - name: Rename to hash
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          hash=$(cat hash_${{ matrix.target }})
          mkdir out
          mv gradlex2 "out/$hash"

      - uses: LanceMcCarthy/Action-AzureBlobUpload@v1.9.0
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          connection_string: ${{ secrets.ConnectionString }}
          container_name: poc
          source_folder: out

  #
  #
  #  D-gg-alpine:
  #    if: false
  #    needs: C-stage2
  #    runs-on: ubuntu-latest
  #
  #    env:
  #      artifact_name: gg_alpine_x86
  #
  #    steps:
  #      - uses: actions/checkout@v2
  #
  #      - name: Download stage 2
  #        uses: actions/download-artifact@v2
  #        with:
  #          name: hash4_alpine
  #          path: hash
  #
  #      - name: Hash
  #        shell: bash
  #        run: |
  #          hash=$(cat hash/hash_alpine)
  #          echo "const char *hash = \"$hash\";" > const.h
  #
  #      - uses: actions/cache@v2
  #        with:
  #          path: my-alpine.img
  #          key: my-alpine3
  #
  #      - run: docker load -i my-alpine.img
  #
  #      - name: Build!
  #        run: docker run --rm -u $(id -u) -v $(pwd):/b my-alpine sh build-stage1.sh
  #
  #      - name: Rename
  #        run: mv build/gg ./${{ env.artifact_name }}
  #
  #      - name: Upload artifact
  #        uses: actions/upload-artifact@v2
  #        with:
  #          name: ${{ env.artifact_name }}
  #          path: ${{ env.artifact_name }}
  #
  #
  D-gg-os:
    needs: C-stage2
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]

    runs-on: ${{ matrix.os }}

    env:
      artifact_name: gg_${{ matrix.os }}_x86

    steps:
      - uses: actions/checkout@v2

      - name: Download gg
        uses: actions/download-artifact@v2
        with:
          name: hash_${{ matrix.os }}
          path: hash

      - name: Hash
        # ENV -> CMAKE -> Code very hard. This very easy
        shell: bash
        run: |
          hash=$(cat hash/hash)
          echo "const char *hash = \"$hash\";" > const.h

      - name: Configure CMake
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

      - name: Build
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

      - name: Rename
        shell: bash
        run: |
          if [[ -f "build/gg" ]]; then
            mv build/gg ./${{ env.artifact_name }}
          else
            mv build/Debug/gg.exe ./${{ env.artifact_name }}
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.artifact_name }}
          path: ${{ env.artifact_name }}
#
#
#  E-stage1:
#    #        needs: [ D-gg-alpine, D-gg-os ]
#    needs: [ D-gg-os ]
#    runs-on: ubuntu-18.04
#    steps:
#      - name: Source
#        uses: actions/checkout@v2.1.0
#
#      - name: Download gg
#        uses: actions/download-artifact@v2
#
#      - uses: actions/cache@v2
#        with:
#          path: makeself
#          key: makeself
#
#      - name: Build with makeself
#        run: |
#          mkdir yes
#          for dir in gg*; do
#            for file in "$dir"/*; do
#              cp "$file" yes
#            done
#          done
#          cp stage1.sh yes
#          ./makeself/makeself.sh yes gradlex gradlex sh stage1.sh
#
#      - name: Upload artifact
#        uses: actions/upload-artifact@v2
#        with:
#          name: gradlex
#          path: gradlex
#
#
#  F-test-alpine:
#    if: false
#    needs: E-stage1
#    runs-on: ubuntu-latest
#    steps:
#      - name: Download gradlex
#        uses: actions/download-artifact@v2
#        with:
#          name: gradlex
#
#      - name: Run!
#        run: |
#          ls
#          docker run --rm -v $(pwd):/b -w /b alpine ls
#          docker run --rm -v $(pwd):/b -w /b alpine sh gradlex -- --version
#
#
#  F-test-os:
#    name: Test
#    needs: E-stage1
#    strategy:
#      matrix:
#        os: [ ubuntu-latest, macos-latest, windows-latest ]
#
#    runs-on: ${{ matrix.os }}
#    steps:
#      - name: Download gradlex
#        uses: actions/download-artifact@v2
#        with:
#          name: gradlex
#

#      - name: Run!
#        run: |
#          sh gradlex -- --version
#          file .gradle/bin/gradle
