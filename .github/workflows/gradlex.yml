on: [ push, pull_request ]

# Plan (tiers):
# A: Prerequisites
# B: Bundle JDK and Gradle (for each target)
# C: Build stage 2 (for each target)
# D: Build gg (for each target)
# E: Build stage 1
# F: Test (for each target)
# G: Create release

name: Gradlex!
env:
  a_cache: 4
  b_cache: 5
  c_cache: 6
  d_cache: 7
  e_cache: 8

jobs:

  A-gradle:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/cache@v2
        name: 'Cache: gradle_${{ env.a_cache }}'
        id: cache
        with:
          path: gradle-7.0
          key: gradle_${{ env.a_cache }}

      - name: Download and unzip Gradle
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          wget https://services.gradle.org/distributions/gradle-7.0-bin.zip
          unzip gradle-7.0-bin.zip


  A-makeself:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/cache@v2
        name: 'Cache: makeself_${{ env.a_cache }}'
        id: makeself
        with:
          path: makeself
          key: makeself_${{ env.a_cache }}

      - name: Install makeself
        if: steps.cache.outputs.cache-hit != 'true' && steps.makeselfcache.outputs.cache-hit != 'true'
        run: |
          wget https://github.com/megastep/makeself/releases/download/release-2.4.3/makeself-2.4.3.run
          sh makeself-2.4.3.run
          mv makeself-2.4.3 makeself


  A-image-alpine:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/cache@v2
        name: 'Cache: alpine_${{ env.a_cache }}'
        id: cache
        with:
          path: my_alpine.img
          key: my_alpine_${{ env.a_cache }}

      - uses: actions/checkout@v2.1.0
        if: steps.cache.outputs.cache-hit != 'true'

      - name: Build my_alpine
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          docker build my_alpine -t my_alpine
          docker save -o my_alpine.img my_alpine


  B-gradlebundle-alpine:
    needs: [ A-gradle, A-image-alpine, A-makeself ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/cache@v2
        name: 'Cache gradlebundle_${{ env.b_cache }}_alpine'
        id: cache
        with:
          path: gradle
          key: gradlebundle_${{ env.b_cache }}_alpine

      - uses: actions/checkout@v2
        if: steps.cache.outputs.cache-hit != 'true'

      - uses: actions/cache@v2
        name: 'Cache: gradle_${{ env.a_cache }}_alpine'
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          path: gradle-7.0
          key: gradle_${{ env.a_cache }}

      - uses: actions/cache@v2
        name: 'Cache: alpine_${{ env.a_cache }}'
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          path: my_alpine.img
          key: my_alpine_${{ env.a_cache }}

      - run: docker load -i my_alpine.img
        if: steps.cache.outputs.cache-hit != 'true'

      - name: Build!
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          docker run --rm -u $(id -u) -v $(pwd):/b my_alpine /o/jdk/bin/jpackage --name gradle -i gradle-7.0/lib --type app-image --main-jar gradle-launcher-7.0.jar

      - name: Test build
        if: steps.cache.outputs.cache-hit != 'true'
        run: docker run --rm -u $(id -u) -v $(pwd):/b my_alpine ./gradle/bin/gradle --version


  B-gradlebundle-os:
    needs: A-gradle
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]

    runs-on: ${{ matrix.os }}
    steps:
      - run: echo C:\Program Files\Git\usr\bin>>"%GITHUB_PATH%"
        if: matrix.os == 'windows-latest'
        shell: cmd

      - uses: actions/cache@v2
        name: 'Cache: gradlebundle_${{ env.b_cache }}_${{ matrix.os }}'
        id: cache
        with:
          path: gradle
          key: gradlebundle_${{ env.b_cache }}_${{ matrix.os }}

      - uses: actions/checkout@v2.1.0
        if: steps.cache.outputs.cache-hit != 'true'

      - uses: actions/cache@v2
        name: 'Cache: gradle_${{ env.a_cache }}'
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          path: gradle-7.0
          key: gradle_${{ env.a_cache }}

      - uses: actions/setup-java@v2
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          distribution: 'adopt'
          java-version: '14'

      - name: Build!
        if: |
          steps.cache.outputs.cache-hit != 'true' &&
          ( matrix.os != 'windows-latest')
        run: jpackage --name gradle -i gradle-7.0/lib --type app-image --main-jar gradle-launcher-7.0.jar

      - name: Build!
        if: |
          steps.cache.outputs.cache-hit != 'true' &&
          ( matrix.os  == 'windows-latest')
        run: jpackage --name gradle -i gradle-7.0\lib --type app-image --main-jar gradle-launcher-7.0.jar

      - run: |
          mv gradle.app gradle
          mkdir gradle/bin
          echo 'chmod +x ./.gradle/Contents/MacOS/gradle' > gradle/bin/gradle
          echo './.gradle/Contents/MacOS/gradle $1' >> gradle/bin/gradle
        if: |
          steps.cache.outputs.cache-hit != 'true' &&
          ( matrix.os == 'macos-latest' )
        shell: bash


  C-stage2:
    needs: [ B-gradlebundle-alpine, B-gradlebundle-os ]
    strategy:
      matrix:
        target: [ alpine, ubuntu-latest, macos-latest, windows-latest ]

    runs-on: ubuntu-latest
    steps:
      - uses: actions/cache@v2
        name: 'Cache: hash_${{ env.c_cache }}_${{ matrix.target }}'
        id: cache
        with:
          path: hash
          key: hash_${{ env.c_cache }}_${{ matrix.target }}

      - uses: actions/checkout@v2.1.0
        if: steps.cache.outputs.cache-hit != 'true'

      - uses: actions/cache@v2
        name: 'Cache: gradlebundle_${{ env.b_cache }}_${{ matrix.target }}'
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          path: gradle
          key: gradlebundle_${{ env.b_cache }}_${{ matrix.target }}

      - uses: actions/cache@v2
        name: 'Cache: makeself_${{ env.a_cache }}'
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          path: makeself
          key: makeself_${{ env.a_cache }}

      - name: Build with makeself
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          ls -lah
          mkdir yes
          cp stage2.sh yes
          mv gradle* yes/gradle
          ./makeself/makeself.sh yes gradlex2 gradlex2 sh stage2.sh

      - name: Hash!
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          gcc -o print_hash print_hash.c
          ./print_hash gradlex2 > hash

      - name: Rename to hash
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          hash=$(cat hash)
          mkdir out
          mv gradlex2 "out/$hash"

      - uses: LanceMcCarthy/Action-AzureBlobUpload@v1.9.0
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          connection_string: ${{ secrets.ConnectionString }}
          container_name: poc
          source_folder: out


  D-gg-alpine:
    needs: C-stage2
    runs-on: ubuntu-latest

    env:
      artifact_name: gg_alpine_x86

    steps:
      - uses: actions/checkout@v2

      - uses: actions/cache@v2
        name: 'Cache: hash_${{ env.c_cache }}_alpine'
        with:
          path: hash
          key: hash_${{ env.c_cache }}_alpine

      - run: du -a .

      - name: Hash
        shell: bash
        run: |
          hash=$(cat hash)
          echo "const char *hash = \"$hash\";" > const.h

      - uses: actions/cache@v2
        name: 'Cache: my_alpine_${{ env.a_cache }}'
        with:
          path: my_alpine.img
          key: my_alpine_${{ env.a_cache }}

      - run: docker load -i my_alpine.img

      - name: Build!
        run: docker run --rm -u $(id -u) -v $(pwd):/b my_alpine sh build-stage1.sh

      - name: Rename
        run: mv build/gg ./${{ env.artifact_name }}


  D-gg-os:
    needs: C-stage2
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]

    runs-on: ${{ matrix.os }}

    env:
      artifact_name: gg_${{ matrix.os }}_x86

    steps:
      - run: echo C:\Program Files\Git\usr\bin>>"%GITHUB_PATH%"
        if: matrix.os == 'windows-latest'
        shell: cmd

      - uses: actions/checkout@v2

      - uses: actions/cache@v2
        name: 'Cache: hash_${{ env.c_cache }}_${{ matrix.os }}'
        with:
          path: hash
          key: hash_${{ env.c_cache }}_${{ matrix.os }}

      - name: Hash
        # ENV -> CMAKE -> Code very hard. This very easy
        shell: bash
        run: |
          du -a .
          hash=$(cat hash)
          echo "const char *hash = \"$hash\";" > const.h

      - name: Configure CMake
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

      - name: Build
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

      - name: Rename
        shell: bash
        run: |
          if [[ -f "build/gg" ]]; then
            mv build/gg ./${{ env.artifact_name }}
          else
            mv build/Debug/gg.exe ./${{ env.artifact_name }}
          fi


  E-stage1:
    needs: [ D-gg-alpine, D-gg-os ]
    runs-on: ubuntu-18.04
    steps:
      - name: Source
        uses: actions/checkout@v2.1.0

      - uses: actions/cache@v2
        name: 'Cache: makeself_${{ env.a_cache }}'
        with:
          path: makeself
          key: makeself_${{ env.a_cache }}

      - name: Build with makeself
        run: |
          mkdir yes
          for dir in gg*; do
            for file in "$dir"/*; do
              cp "$file" yes
            done
          done
          cp stage1.sh yes
          ./makeself/makeself.sh yes gradlex gradlex sh stage1.sh


  F-test-docker:
    needs: E-stage1
    runs-on: ubuntu-latest
    strategy:
      matrix:
        container: [ alpine, debian, fedora ]
    container: ${{ matrix.container }}
    steps:
      - name: Run!
        run: sh gradlex -- --version


  F-test-os:
    needs: E-stage1
    strategy:
      matrix:
        os: [ ubuntu-18.04, ubuntu-20.04, macos-latest, windows-2016, windows-2019 ]

    runs-on: ${{ matrix.os }}
    steps:
      - name: Run!
        run: |
          sh gradlex -- --version
          file .gradle/bin/gradle


  E-release:
    name: Release!
    needs: [ F-test-os, F-test-docker ]
    runs-on: ubuntu-latest
    steps:
      - name: Generate build number
        id: buildnumber
        uses: einaregilsson/build-number@v3
        with:
          token: ${{ github.token }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          tag_name: ${{ steps.buildnumber.outputs.build_number }}
          release_name: Release ${{ steps.buildnumber.outputs.build_number }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token}}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./gradlex
          asset_name: gradlex
          asset_content_type: text/x-shellscript
