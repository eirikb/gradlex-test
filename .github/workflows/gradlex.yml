on: [ push, pull_request ]

# Plan (tiers):
# A: Prerequisites
# B: Bundle JDK and Gradle (for each target)
# C: Build stage 2 (for each target)
# D: Build gg (for each target)
# E: Build stage 1
# F: Test (for each target)

name: Gradlex!
jobs:

  A-gradle:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/cache@v2
        id: gradlecache
        with:
          path: gradle-7.0
          key: gradle43

      - name: Download and unzip Gradle
        if: steps.gradlecache.outputs.cache-hit != 'true'
        run: |
          wget https://services.gradle.org/distributions/gradle-7.0-bin.zip
          unzip gradle-7.0-bin.zip
          ls -lah
          echo "what"
          ls -lah

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: gradle
          path: gradle-7.0


  A-makeself:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/cache@v2
        id: makeself
        with:
          path: makeself
          key: makeself

      - name: Install makeself
        if: steps.hashhack.outputs.cache-hit != 'true' && steps.makeselfcache.outputs.cache-hit != 'true'
        run: |
          wget https://github.com/megastep/makeself/releases/download/release-2.4.3/makeself-2.4.3.run
          sh makeself-2.4.3.run
          mv makeself-2.4.3 makeself


  A-image-alpine:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.1.0
        if: steps.my-alpine.outputs.cache-hit != 'true'

      - uses: actions/cache@v2
        id: my-alpine
        with:
          path: my-alpine.img
          key: my-alpine3

      - name: Build my-alpine
        if: steps.my-alpine.outputs.cache-hit != 'true'
        run: |
          docker build my-alpine -t my-alpine
          docker save -o my-alpine.img my-alpine


  B-gradle-alpine:
    if: false
    needs: [ A-gradle, A-image-alpine, A-makeself ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        if: steps.gradle-alpine.outputs.cache-hit != 'true'

      - uses: actions/cache@v2
        if: steps.gradle-alpine.outputs.cache-hit != 'true'
        with:
          path: gradle-7.0
          key: gradle43

      - uses: actions/cache@v2
        if: steps.gradle-alpine.outputs.cache-hit != 'true'
        with:
          path: my-alpine.img
          key: my-alpine3

      - uses: actions/cache@v2
        id: gradle-alpine
        with:
          path: gradle-alpine
          key: gradle2-alpine

      - run: docker load -i my-alpine.img
        if: steps.gradle-alpine.outputs.cache-hit != 'true'

      - name: Build!
        if: steps.gradle-alpine.outputs.cache-hit != 'true'
        run: |
          docker run --rm -v $(pwd):/b my-alpine jpackage --name gradle -i gradle-7.0/lib --type app-image --main-jar gradle-launcher-7.0.jar
          mv gradle gradle-alpine

      - name: Test build
        if: steps.gradle-alpine.outputs.cache-hit != 'true'
        run: docker run --rm -v $(pwd):/b my-alpine ./gradle-alpine/bin/gradle --version


  B-gradle-os:
    needs: A-gradle
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2.1.0
        if: steps.gradlebundle.outputs.cache-hit != 'true'

      - name: Download stage 2
        uses: actions/download-artifact@v2
        with:
          name: gradle
          path: gradle-7.0

      #      - uses: actions/cache@v2
      #        with:
      #          path: gradle-7.0
      #          key: gradle43

      - uses: actions/cache@v2
        id: gradlebundle
        with:
          path: gradle
          key: gradlebundle-${{ matrix.os }}

      - uses: actions/setup-java@v2
        if: steps.gradlebundle.outputs.cache-hit != 'true'
        with:
          distribution: 'adopt'
          java-version: '14'

      - name: Build!
        if: |
          steps.gradlebundle.outputs.cache-hit != 'true' &&
          ( matrix.os != 'windows-latest')
        run: jpackage --name gradle -i gradle-7.0/lib --type app-image --main-jar gradle-launcher-7.0.jar

      - name: Build!
        if: |
          steps.gradlebundle.outputs.cache-hit != 'true' &&
          ( matrix.os  == 'windows-latest')
        run: jpackage --name gradle -i gradle-7.0\lib --type app-image --main-jar gradle-launcher-7.0.jar

      - run: |
          ls -lah
          mv gradle gradle-${{ matrix.os }}
        if: steps.gradlebundle.outputs.cache-hit != 'true'
        shell: bash

  #      - name: Test build
  #        if: steps.gradlebundle.outputs.cache-hit != 'true'
  #        run: ./gradle-${{ matrix.os }}/bin/gradle --version


  C-stage2:
    #    needs: [ B-gradle-alpine, B-gradle-os ]
    needs: [ B-gradle-os ]
    strategy:
      matrix:
        #        target: [ alpine, ubuntu-latest, macos-latest, windows-latest ]
        target: [ ubuntu-latest, macos-latest, windows-latest ]

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.1.0
        if: steps.hashhack.outputs.cache-hit != 'true'

      - uses: actions/cache@v2
        id: hashhack
        with:
          path: hash_${{ matrix.target }}
          key: hash4_${{ matrix.target }}

      - uses: actions/cache@v2
        if: steps.hashhack.outputs.cache-hit != 'true'
        with:
          path: makeself
          key: makeself

      - uses: actions/cache@v2
        with:
          path: gradle
          key: gradlebundle-${{ matrix.target }}

      - name: Build with makeself
        if: steps.hashhack.outputs.cache-hit != 'true'
        run: |
          ls -lah
          mkdir yes
          cp stage2.sh yes
          mv gradle* yes/gradle
          ./makeself/makeself.sh yes gradlex2 gradlex2 sh stage2.sh

      - name: Hash!
        if: steps.hashhack.outputs.cache-hit != 'true'
        run: |
          gcc -o print_hash print_hash.c
          ./print_hash gradlex2 > hash_${{ matrix.target }}

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: hash_${{ matrix.target }}
          path: hash4_${{ matrix.target }}

      - name: Rename to hash
        if: steps.hashhack.outputs.cache-hit != 'true'
        run: |
          hash=$(cat hash_${{ matrix.target }})
          mkdir out
          mv gradlex2 "out/$hash"

      - uses: LanceMcCarthy/Action-AzureBlobUpload@v1.9.0
        if: steps.hashhack.outputs.cache-hit != 'true'
        with:
          connection_string: ${{ secrets.ConnectionString }}
          container_name: poc
          source_folder: out


  D-gg-alpine:
    if: false
    needs: C-stage2
    runs-on: ubuntu-latest

    env:
      artifact_name: gg_alpine_x86

    steps:
      - uses: actions/checkout@v2

      - name: Download stage 2
        uses: actions/download-artifact@v2
        with:
          name: hash4_alpine
          path: hash

      - name: Hash
        shell: bash
        run: |
          hash=$(cat hash/hash_alpine)
          echo "const char *hash = \"$hash\";" > const.h

      - uses: actions/cache@v2
        with:
          path: my-alpine.img
          key: my-alpine3

      - run: docker load -i my-alpine.img

      - name: Build!
        run: docker run --rm -u $(id -u) -v $(pwd):/b my-alpine sh build-stage1.sh

      - name: Rename
        run: mv build/gg ./${{ env.artifact_name }}

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.artifact_name }}
          path: ${{ env.artifact_name }}


  D-gg-os:
    needs: C-stage2
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]

    runs-on: ${{ matrix.os }}

    env:
      artifact_name: gg_${{ matrix.os }}_x86

    steps:
      - uses: actions/checkout@v2

      - name: Download gg
        uses: actions/download-artifact@v2
        with:
          name: hash4_${{ matrix.os }}
          path: hash

      - name: Hash
        # ENV -> CMAKE -> Code very hard. This very easy
        shell: bash
        run: |
          hash=$(cat hash/hash)
          echo "const char *hash = \"$hash\";" > const.h

      - name: Configure CMake
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

      - name: Build
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

      - name: Rename
        shell: bash
        run: |
          if [[ -f "build/gg" ]]; then
            mv build/gg ./${{ env.artifact_name }}
          else
            mv build/Debug/gg.exe ./${{ env.artifact_name }}
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.artifact_name }}
          path: ${{ env.artifact_name }}


  E-stage1:
    #        needs: [ D-gg-alpine, D-gg-os ]
    needs: [ D-gg-os ]
    runs-on: ubuntu-18.04
    steps:
      - name: Source
        uses: actions/checkout@v2.1.0

      - name: Download gg
        uses: actions/download-artifact@v2

      - uses: actions/cache@v2
        with:
          path: makeself
          key: makeself

      - name: Build with makeself
        run: |
          mkdir yes
          for dir in gg*; do
            for file in "$dir"/*; do
              cp "$file" yes
            done
          done
          cp stage1.sh yes
          ./makeself/makeself.sh yes gradlex gradlex sh stage1.sh

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: gradlex
          path: gradlex


  F-test-alpine:
    if: false
    needs: E-stage1
    runs-on: ubuntu-latest
    steps:
      - name: Download gradlex
        uses: actions/download-artifact@v2
        with:
          name: gradlex

      - name: Run!
        run: |
          ls
          docker run --rm -v $(pwd):/b -w /b alpine ls
          docker run --rm -v $(pwd):/b -w /b alpine sh gradlex -- --version


  F-test-os:
    name: Test
    needs: E-stage1
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]

    runs-on: ${{ matrix.os }}
    steps:
      - name: Download gradlex
        uses: actions/download-artifact@v2
        with:
          name: gradlex

      - name: Run!
        run: |
          sh gradlex -- --version
          file .gradle/bin/gradle
  #  #dsf
  #  #      - name: Configure CMake
  #  #        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
  #  #
  #  #      - name: Build
  #  #        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
  #  #
  #  #      - name: Rename
  #  #        shell: bash
  #  #        run: |
  #  #          if [[ -f "build/gg" ]]; then
  #  #            mv build/gg ./${{ env.artifact_name }}
  #  #          else
  #  #            mv build/Debug/gg.exe ./${{ env.artifact_name }}
  #  #          fi
  #  #
  #  #      - name: Upload artifact
  #  #        uses: actions/upload-artifact@v2
  #  #        with:
  #  #          name: ${{ env.artifact_name }}
  #  #          path: ${{ env.artifact_name }}
  #
  #
  #
  #
  #
  #  D-gg-docker:
  #    if: false
  #    runs-on: ubuntu-latest
  #
  #    env:
  #      artifact_name: gg_alpine_x86
  #
  #    name: gg_alpine_x86
  #
  #    steps:
  #      - uses: actions/checkout@v2
  #
  #      - name: Download stage 2
  #        uses: actions/download-artifact@v2
  #        with:
  #          name: hash_${{ matrix.os }}
  #          path: hash
  #
  #      - name: Hash
  #        # ENV -> CMAKE -> Code very hard. This very easy
  #        shell: bash
  #        run: |
  #          hash=$(cat hash/hash)
  #          echo "const char *hash = \"$hash\";" > const.h
  #
  #      - uses: actions/cache@v2
  #        with:
  #          path: my-alpine.img
  #          key: my-alpine3
  #
  #      - run: docker load -i my-alpine.img
  #
  #      - name: Build!
  #        run: |
  #          ls
  #          docker run --rm -v $(pwd):/b my-alpine ls
  #          docker run --rm -v $(pwd):/b my-alpine sh build-stage1.sh
  #
  #      - name: Rename
  #        shell: bash
  #        run: |
  #          if [[ -f "build/gg" ]]; then
  #            mv build/gg ./${{ env.artifact_name }}
  #          else
  #            mv build/Debug/gg.exe ./${{ env.artifact_name }}
  #          fi
  #
  #      - name: Upload artifact
  #        uses: actions/upload-artifact@v2
  #        with:
  #          name: ${{ env.artifact_name }}
  #          path: ${{ env.artifact_name }}
  #  #dsf
  #  #      - name: Configure CMake
  #  #        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
  #  #
  #  #      - name: Build
  #  #        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
  #  #
  #  #      - name: Rename
  #  #        shell: bash
  #  #        run: |
  #  #          if [[ -f "build/gg" ]]; then
  #  #            mv build/gg ./${{ env.artifact_name }}
  #  #          else
  #  #            mv build/Debug/gg.exe ./${{ env.artifact_name }}
  #  #          fi
  #  #
  #  #      - name: Upload artifact
  #  #        uses: actions/upload-artifact@v2
  #  #        with:
  #  #          name: ${{ env.artifact_name }}
  #  #          path: ${{ env.artifact_name }}
  #
  #  docker:
  #    if: false
  #    strategy:
  #      matrix:
  #        container: [ spritsail/alpine-cmake ]
  #
  #    runs-on: ubuntu-latest
  #    container: ${{ matrix.container }}
  #
  #    env:
  #      artifact_name: gg_${{ matrix.container }}_x86
  #
  #    name: gg_${{ matrix.container }}_x86
  #
  #    steps:
  #      - uses: actions/checkout@v2
  #
  #      - name: Download gg
  #        uses: actions/download-artifact@v2
  #        with:
  #          name: hash_${{ matrix.container }}
  #          path: hash
  #
  #      - name: Hash
  #        # ENV -> CMAKE -> Code very hard. This very easy
  #        shell: bash
  #        run: |
  #          hash=$(cat hash/hash)
  #          echo "const char *hash = \"$hash\";" > const.h
  #
  #      - name: Configure CMake
  #        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
  #
  #      - name: Build
  #        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
  #
  #      - name: Rename
  #        shell: bash
  #        run: |
  #          if [[ -f "build/gg" ]]; then
  #            mv build/gg ./${{ env.artifact_name }}
  #          else
  #            mv build/Debug/gg.exe ./${{ env.artifact_name }}
  #          fi
  #
  #      - name: Upload artifact
  #        uses: actions/upload-artifact@v2
  #        with:
  #          name: ${{ env.artifact_name }}
  #          path: ${{ env.artifact_name }}
  #    #  musl:
  #    #    needs: stage2
  #    #    runs-on: ubuntu-latest
  #    #    # Hope this one isn't compromised
  #    #    container: spritsail/alpine-cmake
  #    #
  #    #    env:
  #    #      artifact_name: gg_musl_x86
  #    #      sum: ${{ needs.stage2.outputs.sum }}
  #    #
  #    #    name: gg_musl_x86
  #    #
  #    #    steps:
  #    #      - uses: actions/checkout@v2
  #    #
  #    #      - name: Checksumhack
  #    #        # ENV -> CMAKE -> Code very hard. This very easy
  #    #        run: echo "const unsigned long long sum = $sum;" > sum.h
  #    #
  #    #      - name: BUILD
  #    #        run: |
  #    #          ls -lah
  #    #          mkdir build
  #    #          cd build
  #    #          cmake ..
  #    #          make
  #    #          mv gg ../${{ env.artifact_name }}
  #    #
  #    #      - name: Upload artifact
  #    #        uses: actions/upload-artifact@v2
  #    #        with:
  #    #          name: ${{ env.artifact_name }}
  #    #          path: ${{ env.artifact_name }}
  #
  #    # This actually works, but for now I don't need these archs
  #    #  on-arch:
  #    #    if: false
  #    #    runs-on: ubuntu-18.04
  #    #
  #    #    env:
  #    #      artifact_name: gg_${{ matrix.distro }}_${{ matrix.arch }}
  #    #
  #    #    name: gg_${{ matrix.distro }}_${{ matrix.arch }}
  #    #
  #    #    strategy:
  #    #      matrix:
  #    #        include:
  #    #          - arch: aarch64
  #    #            distro: ubuntu18.04
  #    #          - arch: aarch64
  #    #            distro: alpine_latest
  #    #          - arch: ppc64le
  #    #            distro: alpine_latest
  #    #          - arch: s390x
  #    #            distro: fedora_latest
  #    #
  #    #    steps:
  #    #      - uses: actions/checkout@v2.1.0
  #    #      - uses: uraimo/run-on-arch-action@v2.0.5
  #    #        name: Build artifact
  #    #        id: build
  #    #        with:
  #    #          arch: ${{ matrix.arch }}
  #    #          distro: ${{ matrix.distro }}
  #    #          githubToken: ${{ github.token }}
  #    #
  #    #          setup: |
  #    #            mkdir -p "${PWD}/artifacts"
  #    #
  #    #          dockerRunArgs: |
  #    #            --volume "${PWD}/artifacts:/artifacts"
  #    #
  #    #          env: |
  #    #            artifact_name: ${{ env.artifact_name }}
  #    #
  #    #          shell: /bin/sh
  #    #          install: |
  #    #            case "${{ matrix.distro }}" in
  #    #              ubuntu*|jessie|stretch|buster)
  #    #                apt-get update -q -y
  #    #                apt-get install -q -y build-essential cmake
  #    #                ;;
  #    #              fedora*)
  #    #                dnf -y update
  #    #                dnf -y install  make automake gcc gcc-c++ kernel-devel cmake
  #    #                ;;
  #    #              alpine*)
  #    #                apk update
  #    #                apk add alpine-sdk cmake
  #    #                ;;
  #    #            esac
  #    #
  #    #          run: |
  #    #            mkdir build
  #    #            cd build
  #    #            cmake .. -DCMAKE_BUILD_TYPE=Release
  #    #            make
  #    #            cd ..
  #    #            cp build/gg "/artifacts/${artifact_name}"
  #    #
  #    #      - name: Upload artifact
  #    #        uses: actions/upload-artifact@v2
  #    #        with:
  #    #          name: ${{ env.artifact_name }}
  #    #          path: artifacts/${{ env.artifact_name }}
  #
  #
  #
  #
  #
  #
#
#
#  test:
#    if: false
#    name: Test
#    needs: stage1
#    strategy:
#      matrix:
#        os: [ ubuntu-latest, macos-latest, windows-latest ]
#
#    runs-on: ${{ matrix.os }}
#    steps:
#      - name: Download gradlex
#        uses: actions/download-artifact@v2
#        with:
#          name: gradlex
#
#      - name: Run!
#        run: |
#          sh gradlex -- --version
#          file .gradle/bin/gradle
#
#
#  test-docker:
#    name: Test docker
#    needs: stage1
#    strategy:
#      matrix:
#        container: [ ubuntu, debian, alpine ]
#
#    runs-on: ubuntu-latest
#    container: ${{ matrix.container }}
#    steps:
#      - name: Download gradlex
#        uses: actions/download-artifact@v2
#        with:
#          name: gradlex
#
#      - name: Run!
#        run: |
#          sh gradlex -- --version
#          file .gradle/bin/gradle
#
##
##
##  test-musl:
##    name: Test (musl)
##    needs: stage1
##    runs-on: ubuntu-latest
##    container: openjdk:12-alpine
##
##    steps:
##      - name: Download gradlex
##        uses: actions/download-artifact@v2
##        with:
##          name: gradlex
##
##      - name: Run!
##        run: sh gradlex -- --version
##
##
##  release:
##    name: Release!
##    needs: [ test, test-musl ]
##    runs-on: ubuntu-latest
##    steps:
##      - name: Generate build number
##        id: buildnumber
##        uses: einaregilsson/build-number@v3
##        with:
##          token: ${{secrets.github_token}}
##
##      - name: Create Release
##        id: create_release
##        uses: actions/create-release@v1
##        env:
##          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
##        with:
##          tag_name: ${{ steps.buildnumber.outputs.build_number }}
##          release_name: Release ${{ steps.buildnumber.outputs.build_number }}
##          draft: false
##          prerelease: false
##
##      - name: Download gradlex
##        uses: actions/download-artifact@v2
##        with:
##          name: gradlex
##
##      - name: Upload Release Asset
##        id: upload-release-asset
##        uses: actions/upload-release-asset@v1
##        env:
##          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
##        with:
##          upload_url: ${{ steps.create_release.outputs.upload_url }}
##          asset_path: ./gradlex
##          asset_name: gradlex
#
##          asset_content_type: text/x-shellscript
